name: Build and Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'windows-latest'
            args: '--target x86_64-pc-windows-msvc'
            target: 'x86_64-pc-windows-msvc'
            os: 'win32'
            arch: 'x64'
            suffix: '.exe'
            bundle: 'nsis'
          - platform: 'macos-latest'
            args: '--target x86_64-apple-darwin'
            target: 'x86_64-apple-darwin'
            os: 'darwin'
            arch: 'x64'
            suffix: ''
            bundle: 'dmg'
          - platform: 'macos-latest'
            args: '--target aarch64-apple-darwin'
            target: 'aarch64-apple-darwin'
            os: 'darwin'
            arch: 'arm64'
            suffix: ''
            bundle: 'dmg'
          - platform: 'ubuntu-latest'
            args: '--target x86_64-unknown-linux-gnu'
            target: 'x86_64-unknown-linux-gnu'
            os: 'linux'
            arch: 'x64'
            suffix: ''
            bundle: 'deb'

    runs-on: ${{ matrix.platform }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'yarn'

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install cross-compilation dependencies (macOS ARM)
        if: matrix.target == 'aarch64-apple-darwin'
        run: |
          rustup target add aarch64-apple-darwin
          # Install required tools for cross-compilation
          if [[ "$RUNNER_OS" == "macOS" ]]; then
            # Ensure we have the right SDK
            sudo xcode-select --install || true
          fi

      - name: Install system dependencies (Linux)
        if: matrix.platform == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.1-dev libgtk-3-dev libayatana-appindicator3-dev librsvg2-dev libssl-dev

      - name: Install frontend dependencies
        run: yarn install --frozen-lockfile --prefer-offline

      - name: Setup Tauri CLI
        run: yarn tauri --version

      - name: Cache Rust dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            src-tauri/target/
          key: ${{ runner.os }}-cargo-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-${{ matrix.target }}-
            ${{ runner.os }}-cargo-

      - name: Build frontend
        run: yarn build

      - name: Build Tauri app
        run: yarn tauri build ${{ matrix.args }}
        env:
          TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          TAURI_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.os }}-${{ matrix.arch }}-${{ matrix.bundle }}
          path: |
            src-tauri/target/${{ matrix.target }}/release/bundle/${{ matrix.bundle }}/*.${{ matrix.bundle == 'nsis' && 'exe' || matrix.bundle == 'dmg' && 'dmg' || 'deb' }}
            src-tauri/target/${{ matrix.target }}/release/bundle/${{ matrix.bundle == 'nsis' && 'msi' && 'msi' || '' }}/*.msi
          retention-days: 30

  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          draft: false
          prerelease: false
          files: |
            ./artifacts/win32-x64-nsis/*.exe
            ./artifacts/win32-x64-nsis/*.msi
            ./artifacts/darwin-x64-dmg/*.dmg
            ./artifacts/darwin-arm64-dmg/*.dmg
            ./artifacts/linux-x64-deb/*.deb
          body: |
            ## NodeModules Cleaner ${{ github.ref_name }}
            
            ### Downloads
            - **Windows**: Download the `.exe` installer or `.msi` package
            - **macOS**: Download the `.dmg` file (Intel and Apple Silicon supported)
            - **Linux**: Download the `.deb` package
            
            ### Installation
            - **Windows**: Run the `.exe` installer or install the `.msi` package
            - **macOS**: Open the `.dmg` file and drag the app to Applications
            - **Linux**: Install with `sudo dpkg -i *.deb`
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
